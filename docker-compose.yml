services:
  c_mysql:
    image: mysql:latest
    container_name: c_mysql
    restart: always
    tty: true
    ports:
      - "5002:3306"
    environment:
      MYSQL_DATABASE: course
      MYSQL_ROOT_PASSWORD: "@@course!!"
      MYSQL_USER: jack
      MYSQL_PASSWORD: "@@jack!!"
    volumes:
      - mysql:/var/lib/mysql # 掛載名為 dbdata 的資料卷到容器的 /var/lib/mysql，確保資料持久化
    networks:
      - network

  api:
    build:
      # 依據當前目錄的 Dockerfile 建立映像檔
      context: ./docker/api
      dockerfile: Dockerfile
    container_name: api
    restart: always
    working_dir: /api
    ports:
      - "5004:8080"
    volumes:
      - ./api:/api # 掛載本機專案目錄到容器的 /app，開發時即時同步程式碼
    networks:
      - network

  c_web:
    # 直接使用主機網路，不使用橋接
    # 也不用使用 port 映射
    # network_mode: host
    restart: always # 宿主主機重開機時自動啟動
    container_name: c_web
    # image: ubuntu-python:latest # 指定現有的 image 名稱
    build:
      context: ./docker/web # 設定在 build 時候 路徑在哪裡，以這個路徑為基礎，只會影響 build 下的參數
      dockerfile: Dockerfile # 依照該目錄下的 Dockerfile 來建立 image
      args:
        # 自訂參數，可以在 Dockerfile 使用
        ARG_SITE_DOCUMENT_ROOT: /home/service/web/dist
        # 設定 nginx 配置檔案的來源
        ARG_NGINX_ENV_CONF: nginx.conf
    volumes:
      - ./web:/home/service/web:cached # 映射本地資料夾到容器內
    ports:
      - "5000:80"
    tty: true # docker run -t
    networks:
      - network

networks:
  network:
    driver: bridge

volumes:
  mysql: # # 定義一個名為 dbdata 的資料卷，管理容器資料存儲
